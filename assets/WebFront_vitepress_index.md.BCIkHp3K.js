import{_ as t,E as p,c as l,J as e,w as n,a as s,a4 as i,m as h,o as k}from"./chunks/framework.Tsvew_Db.js";const B=JSON.parse('{"title":"vitepress从0开始部署笔记","description":"","frontmatter":{},"headers":[],"relativePath":"WebFront/vitepress/index.md","filePath":"WebFront/vitepress/index.md","lastUpdated":1709026836000}'),d={name:"WebFront/vitepress/index.md"},r=i(`<h1 id="vitepress从0开始部署笔记" tabindex="-1">vitepress从0开始部署笔记 <a class="header-anchor" href="#vitepress从0开始部署笔记" aria-label="Permalink to &quot;vitepress从0开始部署笔记&quot;">​</a></h1><h2 id="前置知识" tabindex="-1">前置知识 <a class="header-anchor" href="#前置知识" aria-label="Permalink to &quot;前置知识&quot;">​</a></h2><h4 id="_1、什么是ssg" tabindex="-1">1、什么是SSG <a class="header-anchor" href="#_1、什么是ssg" aria-label="Permalink to &quot;1、什么是SSG&quot;">​</a></h4><p><code>SSG：Static site generators </code>，即静态站点生成器。用户在本地写<code>markdown</code>，即可通过<code>SSG</code>生成一个静态站点，生成后只有纯前端内容，不需要服务端处理，在运行时会更快。</p><p>缺点：</p><ol><li>对数据的任何更改都需要进行完全重建</li><li>不适用于需频繁更新网站内容，实时、动态数据的情况。例如，股票交易或内容需要不断更新的 SaaS 仪表板</li></ol><p>总结，它是前端开发技术，不涉及到后端开发。</p><h4 id="_2、有什么用" tabindex="-1">2、有什么用 <a class="header-anchor" href="#_2、有什么用" aria-label="Permalink to &quot;2、有什么用&quot;">​</a></h4><p>非常适合写个人博客网站，技术文档、API文档、手册等。</p><p>比如vue全家桶工具文档，如vitepress的官网：<a href="https://vitepress.dev/" target="_blank" rel="noreferrer">https://vitepress.dev/</a></p><p>比如elementUI开发文档：<a href="https://element-plus.org/zh-CN/" target="_blank" rel="noreferrer">https://element-plus.org/zh-CN/</a></p><h4 id="_3、目前流行的ssg有哪些" tabindex="-1">3、目前流行的SSG有哪些 <a class="header-anchor" href="#_3、目前流行的ssg有哪些" aria-label="Permalink to &quot;3、目前流行的SSG有哪些&quot;">​</a></h4><ul><li>Next.js 、 Gatsby 非常适合 React 开发者</li><li>Nuxt.js 、vuepress、vitepress非常适合 Vue.js 开发者</li><li>SvelteKit 非常适合 Svelte 开发者</li><li>Hugo 非常适合 Go 开发者</li></ul><h4 id="_4、为什么选择vitepress" tabindex="-1">4、为什么选择vitepress <a class="header-anchor" href="#_4、为什么选择vitepress" aria-label="Permalink to &quot;4、为什么选择vitepress&quot;">​</a></h4><ul><li>基于<code>vue.js</code>，易于上手，适合大部分人，有详细的官方文档，甚至非程序开发人员也能根据官方文档快速搭建</li><li><code>VitePress </code>提供了更好的开发体验、更好的生产性能、更精美的默认主题和更灵活的自定义 <code>API</code>。</li><li><code>Vue</code> 团队决定将重点放在 <code>VitePress</code>，作为长期的主要<code>SSG</code>选择推荐</li></ul><h2 id="一、在本地安装vitepress" tabindex="-1">一、在本地安装vitepress <a class="header-anchor" href="#一、在本地安装vitepress" aria-label="Permalink to &quot;一、在本地安装vitepress&quot;">​</a></h2><p>前置条件：需安装<code>Node.js 16</code> 及以上版本，建议使用<code>node</code>最新版。</p><p>按照官网说明，可以嵌入到当前项目安装或独立为一个<code>vitepress</code>项目。</p><p><strong>即有两种使用场景：</strong></p><ol><li>场景1，二级目录安装。比如我开发了一个<code>web项目</code>，需要为这个项目添加使用文档或接口文档，那么我就可以在这个项目新建一个<code>docs</code>文件夹，在该文件夹中安装、运行和部署<code>vitepress</code>（实际上它与该web项目还是独立的）。</li><li>场景2，独立安装。比如我想将<code>vitepress</code>当做一个技术博客(blog)，那么就可以新建一个全新的<code>根文件夹</code>，然后安装<code>vitepress</code>。</li></ol><p>但是不管是哪种方式，安装命令都是一样的。这里为了方便操作，我以<code>场景2</code>为例。</p><p>首先新建一个文件夹，然后在文件夹里面运行<code>powerShell</code>等命令行工具，以便命令行工具能定位到该文件夹下。</p><p>安装步骤如下：</p><p>1、安装为一个依赖包</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vitepress</span></span></code></pre></div><p>这样在当前文件夹下会新建一个<code>node_modules</code>文件夹和一个<code>package.json</code>，当然还会有<code>package-lock.json</code>.</p><p>2、初始化<code>vitepress</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vitepress</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><p>将需要回答几个简单的问题：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">┌  Welcome to VitePress!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">◇  Where should VitePress initialize the config?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  ./docs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">◇  Site title:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  My Awesome Project</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">◇  Site description:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  A VitePress Site</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">◆  Theme:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  ● Default Theme (Out of the box, good-looking docs)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  ○ Default Theme + Customization</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  ○ Custom Theme</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└  Done! Now run npm run docs:dev and start writing.</span></span></code></pre></div><p>重点关注第二个问题，<code>./docs</code> 它会在刚刚的全新文件夹下创建一个新的<code>docs</code>文件夹，这个可以理解为<code>vitepress</code>的根目录。<code>config</code>和<code>markdown</code>等文档都放置在此。</p><p>以上可参考官网：<a href="https://vitepress.dev/zh/guide/getting-started" target="_blank" rel="noreferrer">https://vitepress.dev/zh/guide/getting-started</a></p><h2 id="二、在本地运行vitepress" tabindex="-1">二、在本地运行vitepress <a class="header-anchor" href="#二、在本地运行vitepress" aria-label="Permalink to &quot;二、在本地运行vitepress&quot;">​</a></h2><p>就像步骤1最后的提示那样，我们可以在本地通过如下命令来预览新建好的静态站点。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs:dev</span></span></code></pre></div><p>运行成功后，会在你默认的浏览器中打开一个域名，比如：<a href="http://localhost:5173/" target="_blank" rel="noreferrer">http://localhost:5173/</a></p><p>最终的效果如下：</p><p><img src="https://image.imqd.cn/202401111442704.png" alt="image-20240111144253615"></p><h2 id="三、在本地书写markdown和简单的配置" tabindex="-1">三、在本地书写markdown和简单的配置 <a class="header-anchor" href="#三、在本地书写markdown和简单的配置" aria-label="Permalink to &quot;三、在本地书写markdown和简单的配置&quot;">​</a></h2><h4 id="一、新建文档和markdown文件" tabindex="-1">一、新建文档和markdown文件 <a class="header-anchor" href="#一、新建文档和markdown文件" aria-label="Permalink to &quot;一、新建文档和markdown文件&quot;">​</a></h4><p>统一在<code>docs</code>中新建一个文件夹，比如我们要存放<code>guide</code>的文档。</p><p>然后在该文件夹下新建一个<code>markdown</code>文件，在<code>markdown</code>中编写内容、代码等。</p><p>例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├─</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> guide</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├─</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> getting-started.md</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └─</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.md</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├─</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.md</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└─</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prologue.md</span></span></code></pre></div><h4 id="二、配置访问地址-导航菜单" tabindex="-1">二、配置访问地址（导航菜单） <a class="header-anchor" href="#二、配置访问地址-导航菜单" aria-label="Permalink to &quot;二、配置访问地址（导航菜单）&quot;">​</a></h4><p><code>vitepress</code>启动本地开发后，支持热更新，也就是说内容更新后，会在打开的浏览器中能保持实时预览。</p><p>但是我们刚刚新建的文件并没有配置访问路径，需要配置才能看到效果。</p><p>找到<code>docs\\.vitepress\\config.js</code>下的<code>themeConfig</code>对象，进行如下配置：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 顶部菜单</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nav</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;首页&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, link: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;指南&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, link: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/guide/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,activeMatch: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/guide/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 侧边栏菜单    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sidebar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;/guide/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/guide/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;首页&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, link: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//对应index.md</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;快速开始&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, link: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;getting-started&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//对应 getting-started.md</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    collapsed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><p>参考地址：<a href="https://vitepress.dev/zh/guide/routing" target="_blank" rel="noreferrer">https://vitepress.dev/zh/guide/routing</a></p>`,50),o=i(`<h2 id="四、部署到github-pages并且每次提交都能自动部署" tabindex="-1">四、部署到github pages并且每次提交都能自动部署 <a class="header-anchor" href="#四、部署到github-pages并且每次提交都能自动部署" aria-label="Permalink to &quot;四、部署到github pages并且每次提交都能自动部署&quot;">​</a></h2><p>我们新建的站点自然是希望能部署到线上，然后在任意地方都可以访问，如果自己没有服务器，那么可以将<code>vitepress</code>部署到<code>github pages</code>，享受免费的部署服务。</p><p>接下来就是实现的具体步骤。</p><h5 id="_1、首先在你的github中创建一个新的仓库-比如我的叫blog" tabindex="-1">1、首先在你的<code>github</code>中创建一个新的仓库，比如我的叫<code>blog</code> <a class="header-anchor" href="#_1、首先在你的github中创建一个新的仓库-比如我的叫blog" aria-label="Permalink to &quot;1、首先在你的\`github\`中创建一个新的仓库，比如我的叫\`blog\`&quot;">​</a></h5><p>这样我们就新建了一个空白的仓库，创建的仓库地址：<code>https://github.com/你的用户名/blog</code></p><h5 id="_2、将刚刚在本地新建的vitepress根目录-与github关联-并且推送到github仓库" tabindex="-1">2、将刚刚在本地新建的<code>vitepress</code>根目录，与<code>github</code>关联，并且推送到<code>github</code>仓库 <a class="header-anchor" href="#_2、将刚刚在本地新建的vitepress根目录-与github关联-并且推送到github仓库" aria-label="Permalink to &quot;2、将刚刚在本地新建的\`vitepress\`根目录，与\`github\`关联，并且推送到\`github\`仓库&quot;">​</a></h5><p>首先确保<code>powerShell</code>命令行工具在本地站点下，然后依次执行如下指令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;first commit&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -M</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/你的用户名/blog.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre></div><p>这样<code>github</code>的空白仓库就同步了本地的站点了。</p><h5 id="_3、确定站点到底是以根站点的方式存在还是二级目录站点存在" tabindex="-1">3、确定站点到底是以根站点的方式存在还是二级目录站点存在 <a class="header-anchor" href="#_3、确定站点到底是以根站点的方式存在还是二级目录站点存在" aria-label="Permalink to &quot;3、确定站点到底是以根站点的方式存在还是二级目录站点存在&quot;">​</a></h5><p>首先确定下我们的站点到底是以根站点的方式存在还是二级目录站点存在。他们的区别就像是这样：</p><blockquote><p><a href="https://xn--6qqv7i14ofosyrb.github.io/" target="_blank" rel="noreferrer">https://你的用户名.github.io/</a> (根目录)</p><p><a href="https://xn--6qqv7i14ofosyrb.github.io/blog/" target="_blank" rel="noreferrer">https://你的用户名.github.io/blog/</a> （二级目录）</p></blockquote><p>如果是后者，那么就需要修改本地站点下的 <code>docs/.vitepress/config.mjs</code>文件，新增base配置项：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitepress&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// https://vitepress.dev/reference/site-config</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lang: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zh-CN&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  base: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/blog/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这里就是二级目录名字，也是github的仓库名字,如果是</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;My Awesome Project&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  description: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A VitePress Site&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h5 id="_4、新建github-pages的自动部署文件" tabindex="-1">4、新建<code>github pages</code>的自动部署文件 <a class="header-anchor" href="#_4、新建github-pages的自动部署文件" aria-label="Permalink to &quot;4、新建\`github pages\`的自动部署文件&quot;">​</a></h5><p>在本地站点根目录下，新建文件夹<code>.github</code>，再新建<code>workflows</code>文件夹，然后在这里面新建一个<code>deploy.yml</code>部署文件。</p><p>内容可以在<a href="https://vitepress.dev/zh/guide/deploy#github-pages" target="_blank" rel="noreferrer">https://vitepress.dev/zh/guide/deploy#github-pages</a> 看到。</p><p>直接复制，不用改动任何东西。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 构建 VitePress 站点并将其部署到 GitHub Pages 的示例工作流程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name: Deploy VitePress site to Pages</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">on:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  # 在针对 \`main\` 分支的推送上运行。如果你</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  # 使用 \`master\` 分支作为默认分支，请将其更改为 \`master\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  push:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    branches: [main]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  # 允许你从 Actions 选项卡手动运行此工作流程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  workflow_dispatch:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 设置 GITHUB_TOKEN 的权限，以允许部署到 GitHub Pages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">permissions:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  contents: read</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pages: write</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  id-token: write</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 只允许同时进行一次部署，跳过正在运行和最新队列之间的运行队列</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">concurrency:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  group: pages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cancel-in-progress: false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jobs:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  # 构建工作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  build:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    runs-on: ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    steps:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - name: Checkout</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        uses: actions/checkout@v3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        with:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          fetch-depth: 0 # 如果未启用 lastUpdated，则不需要</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      # - uses: pnpm/action-setup@v2 # 如果使用 pnpm，请取消注释</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      # - uses: oven-sh/setup-bun@v1 # 如果使用 Bun，请取消注释</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - name: Setup Node</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        uses: actions/setup-node@v3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        with:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          node-version: 18</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          cache: npm # 或 pnpm / yarn</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - name: Setup Pages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        uses: actions/configure-pages@v3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - name: Install dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        run: npm ci # 或 pnpm install / yarn install / bun install</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - name: Build with VitePress</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        run: |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          npm run docs:build # 或 pnpm docs:build / yarn docs:build / bun run docs:build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          touch docs/.vitepress/dist/.nojekyll</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - name: Upload artifact</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        uses: actions/upload-pages-artifact@v2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        with:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          path: docs/.vitepress/dist</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  # 部署工作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  deploy:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    environment:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name: github-pages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      url: \${{ steps.deployment.outputs.page_url }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    needs: build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    runs-on: ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: Deploy</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    steps:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - name: Deploy to GitHub Pages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        id: deployment</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        uses: actions/deploy-pages@v2</span></span></code></pre></div><h5 id="_5、将以上本地文件变动通过如下指令提交到github仓库-进行最后的部署配置工作。" tabindex="-1">5、将以上本地文件变动通过如下指令提交到<code>github</code>仓库，进行最后的部署配置工作。 <a class="header-anchor" href="#_5、将以上本地文件变动通过如下指令提交到github仓库-进行最后的部署配置工作。" aria-label="Permalink to &quot;5、将以上本地文件变动通过如下指令提交到\`github\`仓库，进行最后的部署配置工作。&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;提交说明&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span></span></code></pre></div><h5 id="_6、在vitepress对应的github仓库中进行最后的配置和部署" tabindex="-1">6、在vitepress对应的github仓库中进行最后的配置和部署 <a class="header-anchor" href="#_6、在vitepress对应的github仓库中进行最后的配置和部署" aria-label="Permalink to &quot;6、在vitepress对应的github仓库中进行最后的配置和部署&quot;">​</a></h5><p>在存储库设置中的“Pages”菜单项下，选择“Build and deployment &gt; Source &gt; GitHub Actions”</p><p><img src="https://image.imqd.cn/202401111436205.png" alt="image-20240111143629067"></p>`,24),c=i(`<p>具体流程，可以在仓库的action面板中看到：</p><p><img src="https://image.imqd.cn/202401121655504.png" alt="image-20240112165528353"></p><h5 id="_7、等待部署完成-就可以直接访问部署好的vitepress站点了" tabindex="-1">7、等待部署完成，就可以直接访问部署好的vitepress站点了 <a class="header-anchor" href="#_7、等待部署完成-就可以直接访问部署好的vitepress站点了" aria-label="Permalink to &quot;7、等待部署完成，就可以直接访问部署好的vitepress站点了&quot;">​</a></h5><p>比如我的站点是：<a href="https://imqdcn.github.io/blog/" target="_blank" rel="noreferrer">https://imqdcn.github.io/blog/</a></p><h5 id="_8、如何自动更新和部署" tabindex="-1">8、如何自动更新和部署 <a class="header-anchor" href="#_8、如何自动更新和部署" aria-label="Permalink to &quot;8、如何自动更新和部署&quot;">​</a></h5><p>其实我们的工作都已经完成，你只需要在本地尽情的写作修改，然后记得及时提交到<code>github</code>，它就能自动部署，自动更新网站内容。这些都不需要手动操作了。</p><h5 id="_9、可能的问题" tabindex="-1">9、可能的问题 <a class="header-anchor" href="#_9、可能的问题" aria-label="Permalink to &quot;9、可能的问题&quot;">​</a></h5><p>我下载依赖包最开始用的是<code>pnpm</code>，没有生成<code>package-lock.json</code>导致部署失败，这时就需要用<code>npm</code>生成该文件，然后它会自动部署。</p><h2 id="五、绑定到自己的域名-并开启https" tabindex="-1">五、绑定到自己的域名，并开启https <a class="header-anchor" href="#五、绑定到自己的域名-并开启https" aria-label="Permalink to &quot;五、绑定到自己的域名，并开启https&quot;">​</a></h2><p>虽然<code>https://用户名.github.io/blog/</code>看起来挺不错，但是我们可以将其绑定到自己的域名上，然后通过类似于<code>blog.xxx.cn</code>来访问。</p><p>你只需要按照下面的方法操作即可。</p><h5 id="_1、域名解析" tabindex="-1">1、域名解析 <a class="header-anchor" href="#_1、域名解析" aria-label="Permalink to &quot;1、域名解析&quot;">​</a></h5><p>登录域名服务网站，进行域名解析，比如我的域名是阿里云的，我就需要在阿里云进行解析。</p><p>只需要将你的<code>二级域名</code> cname到 <code>&lt;user&gt;.github.io</code>，如下图所示：</p><p><img src="https://image.imqd.cn/202401121711187.png" alt="image-20240112171113108"></p><h5 id="_2、到github对应的仓库中进行设置" tabindex="-1">2、到github对应的仓库中进行设置 <a class="header-anchor" href="#_2、到github对应的仓库中进行设置" aria-label="Permalink to &quot;2、到github对应的仓库中进行设置&quot;">​</a></h5><p>路径：<code>仓库-setting-pages-Custom domain</code></p><p>添加刚刚在阿里云解析的域名，然后开启强制的<code>https</code>，这样就能通过<code>https://你的域名</code>访问<code>github pages</code>站点了。</p><p><img src="https://image.imqd.cn/202401121716200.png" alt="image-20240112171628103"></p><p>比如这里，我就可以通过<code>https://blog.imqd.cn/</code>来访问。</p><p>https是免费的，空间也是免费的，只有域名是自己的。</p><p>更多<code>github pages</code>配置问题，请参考：<a href="https://docs.github.com/zh/pages/quickstart" target="_blank" rel="noreferrer">https://docs.github.com/zh/pages/quickstart</a></p><h2 id="六、部署到vercel" tabindex="-1">六、部署到vercel <a class="header-anchor" href="#六、部署到vercel" aria-label="Permalink to &quot;六、部署到vercel&quot;">​</a></h2><p>其实部署到<code>github pages</code>和<code>vercel</code>可以二选一，因为他们只是服务器不同，但是站点内容都是一样的。</p><p>但是<code>github</code>在国内访问不稳定，可以同步部署到<code>vercel</code>，以便拥有一个备用访问地址。</p><p>首先确保你已经注册了<code>vercel</code>了：<a href="https://vercel.com/login%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E7%94%A8%E8%87%AA%E5%B7%B1%E7%9A%84%60github%60%E8%B4%A6%E5%8F%B7%E8%BF%9B%E8%A1%8C%E6%B3%A8%E5%86%8C%E5%92%8C%E5%85%B3%E8%81%94%EF%BC%8C%E8%BF%99%E6%A0%B7%E6%9B%B4%E6%96%B9%E4%BE%BF%E6%93%8D%E4%BD%9C%E3%80%82" target="_blank" rel="noreferrer">https://vercel.com/login，可以直接用自己的\`github\`账号进行注册和关联，这样更方便操作。</a></p><p><img src="https://image.imqd.cn/202402261630929.png" alt="image-20240226163053640"></p><p>然后按如下步骤进行操作。</p><h5 id="_1、在vitepress根目录新增部署配置文件" tabindex="-1">1、在<code>vitepress</code>根目录新增部署配置文件 <a class="header-anchor" href="#_1、在vitepress根目录新增部署配置文件" aria-label="Permalink to &quot;1、在\`vitepress\`根目录新增部署配置文件&quot;">​</a></h5><p>新建一个空白的文本文件，并重命名为<code>vercel.json</code>，然后一字不差的复制如下代码，并提交到<code>github</code>中</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;cleanUrls&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;framework&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vitepress&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;installCommand&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm install&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;buildCommand&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm run docs:build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;outputDirectory&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;docs/.vitepress/dist&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>即项目大概是这样的目录结构：</p><p><img src="https://image.imqd.cn/202402261648977.png" alt="image-20240226164830835"></p>`,33),E=i('<h5 id="_2、新建-project" tabindex="-1">2、新建 project <a class="header-anchor" href="#_2、新建-project" aria-label="Permalink to &quot;2、新建 project&quot;">​</a></h5><p><img src="https://image.imqd.cn/202401111458237.png" alt="image-20240111145828135"></p><h5 id="_3、导入要部署的github仓库" tabindex="-1">3、导入要部署的github仓库 <a class="header-anchor" href="#_3、导入要部署的github仓库" aria-label="Permalink to &quot;3、导入要部署的github仓库&quot;">​</a></h5><p><img src="https://image.imqd.cn/202401111459200.png" alt="image-20240111145917903"></p><blockquote><p>如果没有看到自己的仓库，那么是因为权限不足，点击第二个红框处的链接，将对应的仓库加进来就可以看到了。</p></blockquote><h5 id="_4、点击import后-再点击deploy" tabindex="-1">4、点击import后，再点击deploy <a class="header-anchor" href="#_4、点击import后-再点击deploy" aria-label="Permalink to &quot;4、点击import后，再点击deploy&quot;">​</a></h5><p><img src="https://image.imqd.cn/202401121103006.png" alt="image-20240111150219095"></p><h5 id="_5、部署成功后-就可以看到访问地址" tabindex="-1">5、部署成功后，就可以看到访问地址 <a class="header-anchor" href="#_5、部署成功后-就可以看到访问地址" aria-label="Permalink to &quot;5、部署成功后，就可以看到访问地址&quot;">​</a></h5><p><img src="https://image.imqd.cn/202402261637007.png" alt="image-20240226163726186"></p>',9),g=h("code",null,"github",-1),u=i('<h5 id="_6、可能的问题" tabindex="-1">6、可能的问题 <a class="header-anchor" href="#_6、可能的问题" aria-label="Permalink to &quot;6、可能的问题&quot;">​</a></h5><ol><li><p>访问<code>vercel</code>部署的站点后，样式丢失。</p><p>问题解决：</p><p>因为我们在<code>config</code>中是用二级目录的方式部署的，所以，如果直接点击部署，那么部署的站点会丢失样式，这样就需要我们重新配置。</p><p>可以将<code>base</code>中的配置重新改为<code>‘/’ </code>，再重新部署即可。</p></li></ol>',2);function y(b,F,m,v,C,_){const a=p("font");return k(),l("div",null,[r,e(a,{color:"red"},{default:n(()=>[s("其他更多设置，请参考`02.vitepress进阶使用与定制化`")]),_:1}),o,e(a,{color:"red"},{default:n(()=>[s("它会自动监测项目中的`deploy.yml`文件，并且会自动开始进行构建和部署工作。")]),_:1}),c,e(a,{color:"red"},{default:n(()=>[s("接下来在vercel网站中进行操作")]),_:1}),E,e(a,{color:"red"},{default:n(()=>[s("如果github提交了，vercel也会重新部署。")]),_:1}),s("所以只需要维护好"),g,s("的仓库即可。"),u])}const f=t(d,[["render",y]]);export{B as __pageData,f as default};
